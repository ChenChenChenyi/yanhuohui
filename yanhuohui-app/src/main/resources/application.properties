server.port=8080

# -----------------------------------------
# spring国际化的使用，用来通过错误码映射得到错误说明
# -----------------------------------------
spring.messages.basename = i18n/ResultCode

# -----------------------------------------
# dataSource
# -----------------------------------------
cy.mysql.db.name = db_example
cy.mysql.db.username = root
cy.mysql.db.password = 123
cy.mysql.db.url = 127.0.0.1

spring.datasource.url=jdbc:mysql://${cy.mysql.db.url}:3306/${cy.mysql.db.name}?serverTimezone=UTC
spring.datasource.username=${cy.mysql.db.username}
spring.datasource.password=${cy.mysql.db.password}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#####################################################################
# REDIS (Redis 配置)
# 连接工厂使用的数据库索引
spring.redis.database= 0
# Redis服务器主机
spring.redis.host=127.0.0.1
# redis服务器端口
spring.redis.port= 6379
# 登录redis服务器的密码
spring.redis.password = 123456
# 连接超时（毫秒）
spring.redis.timeout=30000
spring.redis.mode=single

####################################################################
# 给定时间池可以分配的最大连接数 使用负值为无限制
spring.redis.pool.max-active= 8
# 连接分配在池耗尽之前在抛出异常之前应阻止的最大时间量（连接池最大阻塞等待时间以毫秒为单位） 使用负值无限期地阻止
spring.redis.pool.max-wait= -1
# 连接池中的最大空闲连接 使用负值来表示无限数量的空闲连接
spring.redis.pool.max-idle= 8
# 连接池中的最小空闲连接 此设置只有在正值时才有效果
spring.redis.pool.min-idle= 0
spring.redis.pool.conn-timeout=3000
spring.redis.pool.so-timeout=3000
spring.redis.pool.size=10

#####################################################################
##集群配置
#spring.redis.cluster.scan-interval=1000
#spring.redis.cluster.nodes=
#spring.redis.cluster.read-mode=SLAVE
#spring.redis.cluster.retry-attempts=3
#spring.redis.cluster.failed-attempts=3
#spring.redis.cluster.slave-connection-pool-size=64
#spring.redis.cluster.master-connection-pool-size=64
#spring.redis.cluster.retry-interval=1500
##哨兵配置
#spring.redis.sentinel.master=business-master
#spring.redis.sentinel.nodes=
#spring.redis.sentinel.master-onlyWrite=true
#spring.redis.sentinel.fail-max=3

########################################################################

# 上传文件总的最大值 默认10MB
spring.servlet.multipart.max-request-size=55MB
#单个文件最大值 默认10MB
spring.servlet.multipart.max-file-size=55MB

# sentinel的配置，规则可通过dashboard推送给服务，保存在内存重启后消失；
# 若需要持久化规则需要添加其他一些配置（依赖和配置），并将配置文件放在nacos上。
# spring.cloud.sentinel.transport.dashboard=localhost:9001

